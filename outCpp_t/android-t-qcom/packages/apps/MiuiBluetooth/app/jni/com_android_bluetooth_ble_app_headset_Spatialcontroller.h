/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_android_bluetooth_ble_app_headset_Spatialcontroller */

#include <errno.h>
#include <fcntl.h>
#include <poll.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <termios.h>
#include <unistd.h>
#include <linux/uhid.h>
#include <pthread.h>
#include <android/log.h>

#define TAG "lib_spatial_controller" // 这个是自定义的LOG的标识
#define LOGD(...) __android_log_print(ANDROID_LOG_DEBUG,TAG ,__VA_ARGS__) // 定义LOGD类型
#define LOGI(...) __android_log_print(ANDROID_LOG_INFO,TAG ,__VA_ARGS__) // 定义LOGI类型
#define LOGW(...) __android_log_print(ANDROID_LOG_WARN,TAG ,__VA_ARGS__) // 定义LOGW类型
#define LOGE(...) __android_log_print(ANDROID_LOG_ERROR,TAG ,__VA_ARGS__) // 定义LOGE类型
#define LOGF(...) __android_log_print(ANDROID_LOG_FATAL,TAG ,__VA_ARGS__) // 定义LOGF类型

#define HID_USAGE_PAGE_SENSOR 0x05,0x20
#define HID_USAGE_SENSOR_TYPE_OTHER_CUSTOM 0x09,0xE1
#define HID_COLLECTION(a) 0xA1,a
#define HID_USAGE_SENSOR_PROPERTY_SENSOR_DESCRIPTION 0x0A,0x08,0x03
#define HID_POWER_OFF 0XFE
#define HID_LOGICAL 0x02
#define HID_LOGICAL_MIN_8(a) 0x15,a
#define HID_LOGICAL_MIN_16(a,b) 0x16,a,b
#define HID_LOGICAL_MIN_32(a,b,c,d) 0x17,a,b,c,d
#define HID_LOGICAL_MAX_8(a) 0x25,a
#define HID_LOGICAL_MAX_16(a,b) 0x26,a,b
#define HID_LOGICAL_MAX_32(a,b,c,d) 0x27,a,b,c,d
#define HID_UNIT_EXPONENT(a) 0x55,a
#define HID_REPORT_SIZE(a) 0x75,a
#define HID_REPORT_COUNT(a) 0x95,a
#define HID_FEATURE(a) 0xB1,a
#define HID_REPORT_ID(a) 0x85,a
#define HID_USAGE_SENSOR_PROPERTY_REPORTING_STATE 0x0A,0x16,0x03 // NAry
#define HID_USAGE_SENSOR_PROPERTY_REPORTING_STATE_NO_EVENTS 0x0A,0x40,0x08 // Sel
#define HID_USAGE_REPORTING_STATE_ON_NONE HID_USAGE_SENSOR_PROPERTY_REPORTING_STATE_NO_EVENTS
#define HID_USAGE_SENSOR_PROPERTY_REPORTING_STATE_ALL_EVENTS 0x0A,0x41,0x08 // Sel
#define HID_USAGE_SENSOR_PROPERTY_POWER_STATE 0x0A,0x19,0x03 // NAry
#define HID_USAGE_SENSOR_DATA_CUSTOM_VALUE_1 0x0A,0x44,0x05
#define HID_USAGE_SENSOR_DATA_CUSTOM_VALUE_2 0x0A,0x45,0x05
#define HID_USAGE_SENSOR_DATA_CUSTOM_VALUE_3 0x0A,0x46,0x05
#define HID_USAGE_SENSOR_DATA_CUSTOM_VALUE_4 0x0A,0x47,0x05
#define HID_USAGE_SENSOR_DATA_CUSTOM_VALUE_5 0x0A,0x48,0x05
#define HID_USAGE_SENSOR_DATA_CUSTOM_VALUE_6 0x0A,0x49,0x05
//begin power state selectors
#define HID_USAGE_SENSOR_PROPERTY_POWER_STATE_UNDEFINED 0x0A,0x50,0x08 // Sel
#define HID_USAGE_SENSOR_PROPERTY_POWER_STATE_D0_FULL_POWER 0x0A,0x51,0x08 // Sel
#define HID_USAGE_SENSOR_PROPERTY_POWER_STATE_D1_LOW_POWER 0x0A,0x52,0x08 // Sel
#define HID_USAGE_SENSOR_PROPERTY_POWER_STATE_D2_STANDBY_WITH_WAKE 0x0A,0x53,0x08 // Sel
#define HID_USAGE_SENSOR_PROPERTY_POWER_STATE_D3_SLEEP_WITH_WAKE 0x0A,0x54,0x08 // Sel
#define HID_USAGE_SENSOR_PROPERTY_POWER_STATE_D4_POWER_OFF 0x0A,0x55,0x08 // Sel
#define HID_END_COLLECTION 0xC0
#define HID_USAGE_SENSOR_PROPERTY_REPORT_INTERVAL 0x0A,0x0E,0x03
#define HID_PHYSICAL_MIN_8(a)           0x35U,(a)
#define HID_PHYSICAL_MAX_8(a)           0x45U,(a)
#define HID_PHYSICAL_MIN_32(a,b,c,d)    0x37U,(a),(b),(c),(d)
#define HID_PHYSICAL_MAX_32(a,b,c,d)    0x47U,(a),(b),(c),(d)
#define HID_DATA_VAR_ABS  0x02
#define HID_DATA_ARR_ABS  0x00
#define HID_CONST_VAR_ABS 0x03
#define HID_USAGE_SENSOR_UNITS_SECOND 0x66,0x01,0x10
#define HID_USAGE_SENSOR_PROPERTY_PERSISTENT_UNIQUE_ID 0x0A,0x02,0x03
#define HID_INPUT(a) 0x81,a
#define HID_APPLICATION 0x01

#ifndef _Included_com_android_bluetooth_ble_app_headset_Spatialcontroller
#define _Included_com_android_bluetooth_ble_app_headset_Spatialcontroller
#ifdef __cplusplus
extern "C" {
#endif

long long LSB_PREFIX_BT = 0x4254000000000000L;

typedef struct{
    int fd;
    bool is_polling;
    int16_t ret[6];
}spatial_ctrl_t;



static unsigned char ReportDescriptor[] = {
    HID_USAGE_PAGE_SENSOR,
    HID_USAGE_SENSOR_TYPE_OTHER_CUSTOM,
    HID_COLLECTION(HID_APPLICATION),
        // Feature report 2 (read-only).
        HID_REPORT_ID(2),

        // Magic value: "#AndroidHeadTracker#1.0"
        HID_USAGE_SENSOR_PROPERTY_SENSOR_DESCRIPTION,
        HID_LOGICAL_MIN_8(0),
        HID_LOGICAL_MAX_8(0xFF),
        HID_REPORT_SIZE(8),
        HID_REPORT_COUNT(23),
        HID_FEATURE(HID_CONST_VAR_ABS),

        // UUID.
        HID_USAGE_SENSOR_PROPERTY_PERSISTENT_UNIQUE_ID,
        HID_LOGICAL_MIN_8(0),
        HID_LOGICAL_MAX_8(0xFF),
        HID_REPORT_SIZE(8),
        HID_REPORT_COUNT(16),
        HID_FEATURE(HID_CONST_VAR_ABS),

        // Feature report 1 (read/write).
        HID_REPORT_ID(1),

        // 1-bit on/off reporting state.
        HID_USAGE_SENSOR_PROPERTY_REPORTING_STATE,
        HID_LOGICAL_MIN_8(0),
        HID_LOGICAL_MAX_8(1),
        HID_REPORT_SIZE(1),
        HID_REPORT_COUNT(1),
        HID_COLLECTION(HID_LOGICAL),
            HID_USAGE_SENSOR_PROPERTY_REPORTING_STATE_NO_EVENTS,
            HID_USAGE_SENSOR_PROPERTY_REPORTING_STATE_ALL_EVENTS,
            HID_FEATURE(HID_DATA_ARR_ABS),
        HID_END_COLLECTION,

        // 1-bit on/off power state.
        HID_USAGE_SENSOR_PROPERTY_POWER_STATE,
        HID_LOGICAL_MIN_8(0),
        HID_LOGICAL_MAX_8(1),
        HID_REPORT_SIZE(1),
        HID_REPORT_COUNT(1),
        HID_COLLECTION(HID_LOGICAL),
            HID_USAGE_SENSOR_PROPERTY_POWER_STATE_D4_POWER_OFF,
            HID_USAGE_SENSOR_PROPERTY_POWER_STATE_D0_FULL_POWER,
            HID_FEATURE(HID_DATA_ARR_ABS),
        HID_END_COLLECTION,

        // 6-bit reporting interval, with values [0x00..0x3F] corresponding to [10ms..100ms].
        HID_USAGE_SENSOR_PROPERTY_REPORT_INTERVAL,
        HID_LOGICAL_MIN_8(0x00),
        HID_LOGICAL_MAX_8(0x3F),
        HID_PHYSICAL_MIN_8(10),
        HID_PHYSICAL_MAX_8(100),
        HID_REPORT_SIZE(6),
        HID_REPORT_COUNT(1),
        HID_USAGE_SENSOR_UNITS_SECOND,
        HID_UNIT_EXPONENT(0xD),  // 10^-3
        HID_FEATURE(HID_DATA_VAR_ABS),

        // Input report 1

        // Orientation as rotation vector (scaled to [-pi..pi] rad).
        HID_USAGE_SENSOR_DATA_CUSTOM_VALUE_1,
        HID_LOGICAL_MIN_16(0x01, 0x80), // LOGICAL_MINIMUM (-32767)
        HID_LOGICAL_MAX_16(0xFF, 0x7F), // LOGICAL_MAXIMUM (32767)
        HID_PHYSICAL_MIN_32(0x60, 0x4F, 0x46, 0xED),  // -314159265
        HID_PHYSICAL_MAX_32(0xA1, 0xB0, 0xB9, 0x12),  // 314159265
        HID_UNIT_EXPONENT(0x08),  // 10^-8
        HID_REPORT_SIZE(16),
        HID_REPORT_COUNT(3),
        HID_INPUT(HID_DATA_VAR_ABS),

        // Angular velocity as rotation vector (scaled to [-32..32] rad/sec).
        HID_USAGE_SENSOR_DATA_CUSTOM_VALUE_2,
        HID_LOGICAL_MIN_16(0x01, 0x80), // LOGICAL_MINIMUM (-32767)
        HID_LOGICAL_MAX_16(0xFF, 0x7F), // LOGICAL_MAXIMUM (32767)
        HID_PHYSICAL_MIN_8(0xE0),
        HID_PHYSICAL_MAX_8(0x20),
        HID_UNIT_EXPONENT(0x00),  // 10^0
        HID_REPORT_SIZE(16),
        HID_REPORT_COUNT(3),
        HID_INPUT(HID_DATA_VAR_ABS),

        // Reference frame reset counter.
        HID_USAGE_SENSOR_DATA_CUSTOM_VALUE_3,
        HID_LOGICAL_MIN_8(0x00),
        HID_LOGICAL_MAX_8(0xFF),
        HID_PHYSICAL_MIN_8(0x00),
        HID_PHYSICAL_MAX_8(0x00),
        HID_UNIT_EXPONENT(0x00),  // 10^0
        HID_REPORT_SIZE(8),
        HID_REPORT_COUNT(1),
        HID_INPUT(HID_DATA_VAR_ABS),

    HID_END_COLLECTION,
};

/*
 * Class:     com_android_bluetooth_ble_app_headset_Spatialcontroller
 * Method:    createspatialhid
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_com_android_bluetooth_ble_app_headset_Spatialcontroller_createspatialhid
  (JNIEnv *env, jclass, jstring);

/*
 * Class:     com_android_bluetooth_ble_app_headset_Spatialcontroller
 * Method:    sendspatialdata
 * Signature: (Ljava/lang/String;[B)V
 */
JNIEXPORT void JNICALL Java_com_android_bluetooth_ble_app_headset_Spatialcontroller_sendspatialdata
  (JNIEnv *, jobject, jstring, jfloatArray);

/*
 * Class:     com_android_bluetooth_ble_app_headset_Spatialcontroller
 * Method:    destroyspatialhid
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_com_android_bluetooth_ble_app_headset_Spatialcontroller_destroyspatialhid
  (JNIEnv *, jclass);

#ifdef __cplusplus
}
#endif
#endif
